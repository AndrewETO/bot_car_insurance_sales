const fs = require("fs");
const path = require("path");
const axios = require("axios");
const mindee = require("mindee");
require("dotenv/config");

const mindeeClient = new mindee.Client({ apiKey: process.env.MINDEE_API_KEY });

function start_script(name) {
  return `Hi, ${name}, I am Car Insurance bot! 
A'll be happy to assist you with car insurance purchasing!
Would you like to proceed further?`;
}

async function handleDocument(ctx, token) {
  try {
    const file = ctx.message.document;

    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = ["application/pdf", "image/jpeg", "image/png"];
    if (!allowedTypes.includes(file.mime_type)) {
      return ctx.reply(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å PDF, JPG –∏–ª–∏ PNG —Ñ–∞–π–ª –ø–∞—Å–ø–æ—Ä—Ç–∞."
      );
    }

    const fileId = file.file_id;
    const fileName = file.file_name || "document.pdf";

    // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram
    const fileData = await ctx.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${token}/${fileData.file_path}`;

    // 3Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    const tempDir = path.join(__dirname, "..", "temp");
    fs.mkdirSync(tempDir, { recursive: true });
    const filePath = path.join(tempDir, fileName);

    const response = await axios({
      url: fileUrl,
      method: "GET",
      responseType: "arraybuffer",
    });
    fs.writeFileSync(filePath, response.data);

    await ctx.reply("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –†–∞—Å–ø–æ–∑–Ω–∞—é –¥–∞–Ω–Ω—ã–µ...");

    // 4Ô∏è‚É£ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è OCR-–º–æ–¥–µ–ª—å (—Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –≤—Å—ë)
    const inputDoc = mindeeClient.docFromPath(filePath);
    const apiResponse = await mindeeClient.parse(
      mindee.product.DocumentV1,
      inputDoc
    );

    // 5Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultText = JSON.stringify(apiResponse.document, null, 2);

    // Mindee –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–µ–∂–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
    const chunks = resultText.match(/.{1,4000}/gs);
    for (const chunk of chunks) {
      await ctx.reply("üìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + chunk);
    }

    // 6Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(filePath);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", err?.message || err);
    if (err.response?.data) {
      console.error("üß© –û—Ç–≤–µ—Ç Mindee:", err.response.data);
    }
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    );
  }
}

module.exports = { start_script, handleDocument };
