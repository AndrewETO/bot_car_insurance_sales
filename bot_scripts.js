const fs = require("fs");
const path = require("path");
const axios = require("axios");
const mindee = require("mindee");
require("dotenv/config");

const mindeeClient = new mindee.Client({ apiKey: process.env.MINDEE_API_KEY });

function start_script(name) {
  return `Hi, ${name}, I am Car Insurance bot! 
A'll be happy to assist you with car insurance purchasing!
Would you like to proceed further?`;
}

async function handleDocument(ctx, token) {
  try {
    const file = ctx.message.document;

    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    const allowedTypes = ["application/pdf", "image/jpeg", "image/png"];
    if (!allowedTypes.includes(file.mime_type)) {
      return ctx.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å PDF, JPG –∏–ª–∏ PNG –¥–æ–∫—É–º–µ–Ω—Ç.");
    }

    // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
    const fileData = await ctx.telegram.getFile(file.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${token}/${fileData.file_path}`;
    const fileName = file.file_name || "document.pdf";

    // 3Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º
    const tempDir = path.join(__dirname, "..", "temp");
    fs.mkdirSync(tempDir, { recursive: true });
    const filePath = path.join(tempDir, fileName);

    const response = await axios({
      url: fileUrl,
      method: "GET",
      responseType: "arraybuffer",
    });
    fs.writeFileSync(filePath, response.data);

    await ctx.reply("üì• –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –†–∞—Å–ø–æ–∑–Ω–∞—é...");

    // 4Ô∏è‚É£ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å ReceiptV5
    const inputDoc = mindeeClient.docFromPath(filePath);
    const apiResponse = await mindeeClient.parse(mindee.product.ReceiptV5, inputDoc);

    // 5Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    const result = apiResponse?.document?.inference?.pages
      ?.map((p) => p?.content)
      ?.join("\n\n");

    if (result && result.trim().length > 0) {
      const chunks = result.match(/.{1,4000}/gs);
      for (const chunk of chunks) {
        await ctx.reply("üìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n" + chunk);
      }
    } else {
      await ctx.reply("ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π —Ñ–æ—Ç–æ –ø–æ–ª—É—á—à–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.");
    }

    fs.unlinkSync(filePath);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", err.message);
    if (err.response?.data) console.error("üß© –û—Ç–≤–µ—Ç Mindee:", err.response.data);
    await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
  }
}

module.exports = { start_script, handleDocument };
